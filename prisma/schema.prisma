generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique @db.VarChar(255)
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      String
  Esport    Esport[]
  League    League[]
  Team      Team[]
  roleRel   Role     @relation(fields: [role], references: [name])

  @@index([role], map: "User_role_fkey")
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model Esport {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  imageUrl    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  leagues     League[]

  @@index([userId], map: "Esport_userId_fkey")
}

model League {
  id          Int      @id @default(autoincrement())
  name        String
  code        String
  slug        String   @unique
  region      String
  season      Int
  userId      String
  esportId    Int
  groupIsLock Boolean  @default(false)
  createdAt   DateTime @default(now())
  esport      Esport   @relation(fields: [esportId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  stage       Stage[]

  @@unique([code, season])
  @@index([esportId], map: "League_esportId_fkey")
  @@index([userId], map: "League_userId_fkey")
}

model Stage {
  id       Int         @id @default(autoincrement())
  name     String
  leagueId Int
  format   StageFormat
  order    Int
  isLocked Boolean     @default(false)
  groups   Group[]
  matches  Match[]
  teamsPerGroup Int @default(3)
  league   League      @relation(fields: [leagueId], references: [id])

  @@index([leagueId])
}

model Team {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  code         String
  region       String
  userId       String
  groupMembers GroupMember[]
  matchesAway  Match[]       @relation("AwayTeam")
  matchesHome  Match[]       @relation("HomeTeam")
  user         User          @relation(fields: [userId], references: [id])

  @@index([userId], map: "Team_userId_fkey")
}

model Group {
  id      Int           @id @default(autoincrement())
  name    String
  stageId Int
  stage   Stage         @relation(fields: [stageId], references: [id])
  members GroupMember[]

  @@unique([name, stageId])
  @@index([stageId], map: "Group_stageId_fkey")
}

model GroupMember {
  id      Int   @id @default(autoincrement())
  groupId Int
  teamId  Int
  group   Group @relation(fields: [groupId], references: [id])
  team    Team  @relation(fields: [teamId], references: [id])

  @@unique([groupId, teamId])
  @@index([teamId], map: "GroupMember_teamId_fkey")
}

model Match {
  id         Int          @id @default(autoincrement())
  date       DateTime
  format     MatchFormat
  homeScore  Int          @default(0)
  awayScore  Int          @default(0)
  homeTeamId Int
  awayTeamId Int
  bracket    BracketType?
  matchCode  String?
  stageId    Int
  awayTeam   Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam   Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  stage      Stage        @relation(fields: [stageId], references: [id])

  @@index([awayTeamId], map: "Match_awayTeamId_fkey")
  @@index([homeTeamId], map: "Match_homeTeamId_fkey")
  @@index([stageId], map: "Match_stageId_fkey")
}

enum StageFormat {
  SINGLE_ELIMINATION
  DOUBLE_ELIMINATION
  ROUND_ROBIN
  SWISS
  LADDER
}

enum MatchFormat {
  BO1
  BO3
  BO5
  BO7
}

enum BracketType {
  ROUND_OF_32
  ROUND_OF_16
  QUARTERFINAL
  SEMIFINAL
  FINAL
  THIRD_PLACE
}